@page "/"
@inject IHealthRecordService HealthRecordService
@using Nexus.HealthChecksDashboard.Models
@using Nexus.HealthChecksDashboard.Abstractions
@implements IDisposable

<PageTitle>Index</PageTitle>

@if (_serviceRecords == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th style="width: 5%"></th>
            <th style="width: 30%">Client Name / Instance</th>
            <th style="width: 10%">Status</th>
            <th style="width: 10%">Database</th>
            <th style="width: 10%">Liveness</th>
            <th style="width: 15%">Readiness</th>
            <th style="width: 20%">Last Check</th>
        </tr>
        </thead>
        <tbody>
        @foreach (ServiceHealthRecordModel serviceRecord in _serviceRecords)
        {
            <tr>
                <td>
                    @if (serviceRecord.InstanceHealthRecords.Count > 0)
                    {
                        <button @onclick="(() => ToggleInstances(serviceRecord))">
                            @GetButtonContent(serviceRecord)
                        </button>
                    }
                </td>
                <td>@serviceRecord.ClientName</td>
                <td>@serviceRecord.Status</td>
                <td>@serviceRecord.Database</td>
                <td>@serviceRecord.Liveness</td>
                <td>@serviceRecord.Readiness</td>
                <td>@serviceRecord.CreatedAt</td>
            </tr>
            @if (serviceRecord.InstanceHealthRecords.Count > 0)
            {
                @foreach (InstanceHealthRecordModel instance in serviceRecord.InstanceHealthRecords)
                {
                    <tr style="display: @(serviceRecord.Expanded ? "table-row" : "none")">
                        <td></td>
                        <td>@instance.InstanceNumber</td>
                        <td>@instance.Response?.Status</td>
                        <td>@instance.Response?.Database?.Status</td>
                        <td>@instance.Response?.Liveness?.LivenessState</td>
                        <td>@instance.Response?.Readiness?.ReadinessState</td>
                        <td>@instance.CreatedAt</td>
            </tr>
        }
            }
        }
        </tbody>
    </table>
    <p>Last checked at @_lastChecked?.ToString("MM/dd/yyyy hh:mm:ss tt")</p>
}

@code {

    private ServiceHealthRecordModel[]? _serviceRecords;

    private Timer? _timer;

    private DateTime? _lastChecked;

    protected override async Task OnInitializedAsync()
    {
        await UpdateHealthRecordsAsync();
        _timer = new Timer(async _ => await UpdateHealthRecordsAsync(), null, TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(5));
    }

    private async Task UpdateHealthRecordsAsync()
    {
        ServiceHealthRecordModel[] newServiceRecords = await HealthRecordService.GetHealthRecordsAsync();

        foreach (ServiceHealthRecordModel serviceRecord in newServiceRecords)
        {
            serviceRecord.Expanded = _serviceRecords?.FirstOrDefault(x => x.ClientName == serviceRecord.ClientName)?.Expanded ?? false;
        }
        
        //_serviceRecords = await HealthRecordService.GetHealthRecordsAsync();
        
        _serviceRecords = newServiceRecords;
        _lastChecked = DateTime.UtcNow;
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
    
    private void ToggleInstances(ServiceHealthRecordModel service)
    {
        service.Expanded = !service.Expanded;
    }

    private string GetButtonContent(ServiceHealthRecordModel serviceRecord)
    {
        return serviceRecord.Expanded ? "-" : "+";
    }
}
