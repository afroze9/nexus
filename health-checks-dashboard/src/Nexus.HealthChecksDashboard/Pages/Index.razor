@page "/"
@inject IHealthRecordService HealthRecordService
@using Nexus.HealthChecksDashboard.Models
@using Nexus.HealthChecksDashboard.Abstractions
@implements IDisposable

<PageTitle>Index</PageTitle>

@if (_records == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Client Name</th>
            <th>Status</th>
            <th>Database</th>
            <th>Liveness</th>
            <th>Readiness</th>
            <th>Last Check</th>
        </tr>
        </thead>
        <tbody>
        @foreach (HealthRecordModel record in _records)
        {
            <tr>
                <td>@record.ClientName</td>
                <td>@record.Response?.Status</td>
                <td>@record.Response?.Database?.Status</td>
                <td>@record.Response?.Liveness?.LivenessState</td>
                <td>@record.Response?.Readiness?.ReadinessState</td>
                <td>@record.CreatedAt</td>
            </tr>
        }
        </tbody>
    </table>
    <p>Last checked at @_lastChecked?.ToString("MM/dd/yyyy hh:mm:ss tt")</p>
}

@code {

    private HealthRecordModel[]? _records;

    private Timer? _timer;

    private DateTime? _lastChecked;

    protected override async Task OnInitializedAsync()
    {
        await UpdateHealthRecordsAsync();
        _timer = new Timer(async _ => await UpdateHealthRecordsAsync(), null, TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(5));
    }

    private async Task UpdateHealthRecordsAsync()
    {
        _records = await HealthRecordService.GetHealthRecordsAsync();
        _lastChecked = DateTime.UtcNow;
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
